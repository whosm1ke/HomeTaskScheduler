<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>

<#

    bool isCommand = true;
    string REQUEST_NAME = "SendInvite";
    string HANDLER_NAME = $"{REQUEST_NAME}Handler";
    string RETURN_TYPE_NAME = "AbstractUser";
    string FOLDER_NAME = "DTO";
    string basePath = Path.Combine(Directory.GetCurrentDirectory(), FOLDER_NAME);

    Directory.CreateDirectory(Path.Combine(basePath, "Requests", "Commands"));
    Directory.CreateDirectory(Path.Combine(basePath, "Handlers", "Commands"));

    if (isCommand)
    {
        CreateFile(Path.Combine(basePath, "Requests", "Commands", $"{REQUEST_NAME}.cs"),
            GetCommandTemplate(REQUEST_NAME, RETURN_TYPE_NAME, Path.Combine(basePath, "Requests", "Commands")));
        CreateFile(Path.Combine(basePath, "Handlers", "Commands", $"{HANDLER_NAME}.cs"),
            GetCommandHandlerTemplate(HANDLER_NAME, REQUEST_NAME, RETURN_TYPE_NAME, Path.Combine(basePath, "Handlers", "Commands")));
    }
    else
    {
        CreateFile(Path.Combine(basePath, "Requests", "Queries", $"{REQUEST_NAME}.cs"),
            GetQueryTemplate(REQUEST_NAME, RETURN_TYPE_NAME, Path.Combine(basePath, "Requests", "Queries")));
        CreateFile(Path.Combine(basePath, "Handlers", "Queries", $"{HANDLER_NAME}.cs"),
            GetQueryHandlerTemplate(HANDLER_NAME, REQUEST_NAME, RETURN_TYPE_NAME, Path.Combine(basePath, "Handlers", "Queries")));
    }
#>

<#+
    void CreateFile(string path, string content)
    {
        File.WriteAllText(path, content);
    }

    string GetNamespace(string path)
    {
        var parts = path.Split(Path.DirectorySeparatorChar);
        var projectIndex = Array.IndexOf(parts, "HomeTaskScheduler.Application");
        if (projectIndex == -1)
        {
            throw new InvalidOperationException("Project directory not found in path.");
        }
        var namespaceParts = parts.Skip(projectIndex).ToList(); // Skip the project directory itself
        return string.Join(".", namespaceParts);
    }

    string GetCommandTemplate(string commandName, string returnType, string path)
    {
        string namespaceName = GetNamespace(path);
        return $@"using MediatR;

namespace {namespaceName};

public class {commandName} : IRequest<{returnType}>
{{

}}
";
    }

    string GetQueryTemplate(string queryName, string returnType, string path)
    {
        string namespaceName = GetNamespace(path);
        return $@"using MediatR;

namespace {namespaceName};

public class {queryName} : IRequest<{returnType}>
{{

}}
";
    }

    string GetCommandHandlerTemplate(string handlerName, string commandName, string returnType, string path)
    {
        string namespaceName = GetNamespace(path);
        return $@"using MediatR;
using {namespaceName.Replace(".Handlers.Commands", ".Requests.Commands")};

namespace {namespaceName};

public class {handlerName} : IRequestHandler<{commandName}, {returnType}>
{{
    public async Task<{returnType}> Handle({commandName} request, CancellationToken cancellationToken)
    {{
        return new {returnType}();
    }}
}}
";
    }

    string GetQueryHandlerTemplate(string handlerName, string queryName, string returnType, string path)
    {
        string namespaceName = GetNamespace(path);
        return $@"using MediatR;
using {namespaceName.Replace(".Handlers.Queries", ".Requests.Queries")};

namespace {namespaceName};

public class {handlerName} : IRequestHandler<{queryName}, {returnType}>
{{
    public async Task<{returnType}> Handle({queryName} request, CancellationToken cancellationToken)
    {{
        return new {returnType}();
    }}
}}
";
    }
#>

